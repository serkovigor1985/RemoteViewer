//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18052
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RV.ClientServer.ServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/RV.ClientServer.Server")]
    [System.SerializableAttribute()]
    public partial class ServiceException : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Exception InnerExceptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private RV.ClientServer.ServiceReference.ServiceExceptionType ExceptionTypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Exception InnerException {
            get {
                return this.InnerExceptionField;
            }
            set {
                if ((object.ReferenceEquals(this.InnerExceptionField, value) != true)) {
                    this.InnerExceptionField = value;
                    this.RaisePropertyChanged("InnerException");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public RV.ClientServer.ServiceReference.ServiceExceptionType ExceptionType {
            get {
                return this.ExceptionTypeField;
            }
            set {
                if ((this.ExceptionTypeField.Equals(value) != true)) {
                    this.ExceptionTypeField = value;
                    this.RaisePropertyChanged("ExceptionType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceExceptionType", Namespace="http://schemas.datacontract.org/2004/07/RV.ClientServer.Server")]
    public enum ServiceExceptionType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Login = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UpdateScreen = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UpdateCursor = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Logout = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CheckDllVersion = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DllUpdate = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Default = 0,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WindowData", Namespace="http://schemas.datacontract.org/2004/07/RV.ClientServer.Server")]
    [System.SerializableAttribute()]
    public partial class WindowData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TopField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BottomField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LeftField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RightField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] ImageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Top {
            get {
                return this.TopField;
            }
            set {
                if ((this.TopField.Equals(value) != true)) {
                    this.TopField = value;
                    this.RaisePropertyChanged("Top");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public int Bottom {
            get {
                return this.BottomField;
            }
            set {
                if ((this.BottomField.Equals(value) != true)) {
                    this.BottomField = value;
                    this.RaisePropertyChanged("Bottom");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public int Left {
            get {
                return this.LeftField;
            }
            set {
                if ((this.LeftField.Equals(value) != true)) {
                    this.LeftField = value;
                    this.RaisePropertyChanged("Left");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public int Right {
            get {
                return this.RightField;
            }
            set {
                if ((this.RightField.Equals(value) != true)) {
                    this.RightField = value;
                    this.RaisePropertyChanged("Right");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=4)]
        public byte[] Image {
            get {
                return this.ImageField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageField, value) != true)) {
                    this.ImageField = value;
                    this.RaisePropertyChanged("Image");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CursorData", Namespace="http://schemas.datacontract.org/2004/07/RV.ClientServer.Server")]
    [System.SerializableAttribute()]
    public partial class CursorData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int XField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int YField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] ImageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int X {
            get {
                return this.XField;
            }
            set {
                if ((this.XField.Equals(value) != true)) {
                    this.XField = value;
                    this.RaisePropertyChanged("X");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Y {
            get {
                return this.YField;
            }
            set {
                if ((this.YField.Equals(value) != true)) {
                    this.YField = value;
                    this.RaisePropertyChanged("Y");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public byte[] Image {
            get {
                return this.ImageField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageField, value) != true)) {
                    this.ImageField = value;
                    this.RaisePropertyChanged("Image");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IRemoteService", SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IRemoteService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRemoteService/Login", ReplyAction="http://tempuri.org/IRemoteService/LoginResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(RV.ClientServer.ServiceReference.ServiceException), Action="http://tempuri.org/IRemoteService/LoginServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/RV.ClientServer.Server")]
        bool Login(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRemoteService/UpdateScreenImage", ReplyAction="http://tempuri.org/IRemoteService/UpdateScreenImageResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(RV.ClientServer.ServiceReference.ServiceException), Action="http://tempuri.org/IRemoteService/UpdateScreenImageServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/RV.ClientServer.Server")]
        RV.ClientServer.ServiceReference.WindowData UpdateScreenImage();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRemoteService/UpdateCursorImage", ReplyAction="http://tempuri.org/IRemoteService/UpdateCursorImageResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(RV.ClientServer.ServiceReference.ServiceException), Action="http://tempuri.org/IRemoteService/UpdateCursorImageServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/RV.ClientServer.Server")]
        RV.ClientServer.ServiceReference.CursorData UpdateCursorImage();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRemoteService/GetDllsForUpdate", ReplyAction="http://tempuri.org/IRemoteService/GetDllsForUpdateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(RV.ClientServer.ServiceReference.ServiceException), Action="http://tempuri.org/IRemoteService/GetDllsForUpdateServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/RV.ClientServer.Server")]
        System.Collections.Generic.Dictionary<string, string> GetDllsForUpdate();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRemoteService/DllData", ReplyAction="http://tempuri.org/IRemoteService/DllDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(RV.ClientServer.ServiceReference.ServiceException), Action="http://tempuri.org/IRemoteService/DllDataServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/RV.ClientServer.Server")]
        byte[] DllData(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRemoteService/Logout", ReplyAction="http://tempuri.org/IRemoteService/LogoutResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(RV.ClientServer.ServiceReference.ServiceException), Action="http://tempuri.org/IRemoteService/LogoutServiceExceptionFault", Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/RV.ClientServer.Server")]
        void Logout();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRemoteServiceChannel : RV.ClientServer.ServiceReference.IRemoteService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RemoteServiceClient : System.ServiceModel.ClientBase<RV.ClientServer.ServiceReference.IRemoteService>, RV.ClientServer.ServiceReference.IRemoteService {
        
        public RemoteServiceClient() {
        }
        
        public RemoteServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RemoteServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RemoteServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RemoteServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool Login(string name) {
            return base.Channel.Login(name);
        }
        
        public RV.ClientServer.ServiceReference.WindowData UpdateScreenImage() {
            return base.Channel.UpdateScreenImage();
        }
        
        public RV.ClientServer.ServiceReference.CursorData UpdateCursorImage() {
            return base.Channel.UpdateCursorImage();
        }
        
        public System.Collections.Generic.Dictionary<string, string> GetDllsForUpdate() {
            return base.Channel.GetDllsForUpdate();
        }
        
        public byte[] DllData(string name) {
            return base.Channel.DllData(name);
        }
        
        public void Logout() {
            base.Channel.Logout();
        }
    }
}
